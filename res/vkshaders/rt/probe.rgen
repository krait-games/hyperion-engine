#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable

layout(set = 9, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 9, binding = 1, rgba8) uniform image2D image;


layout(set = 9, binding = 5, rgba16f) uniform image2D radiance_image;

#include "../include/scene.inc"
#include "../include/rt/payload.inc"

layout(location = 0) rayPayloadEXT RayProbePayload payload;
#define MAX_RECURSION 3

#include "../include/rt/probe/shared.inc"
#include "../include/random.inc"

void main() 
{
    const uvec2 coord = uvec2(gl_LaunchIDEXT.xy);
    
    const uint probe_index = coord.x;
    const uint ray_index   = coord.y;
    
    vec3 origin    = ProbeIndexToWorldPosition(probe_index);
    vec3 direction = normalize(mat3(push_constants.rotation) * SphericalFibonacci(ray_index, probe_system.num_rays_per_probe));
    
    uint flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;
    
    //payload.rand    = hash(push_constants.time);
    payload.diffuse = vec3(0.0);
    
    traceRayEXT(tlas, flags, mask, 0, 0, 0, origin, tmin, direction, tmax, 0);

    vec3 color = vec3(0.0);

    /*for (int i = 0; i < MAX_RECURSION; i++) {
        traceRayEXT(tlas, flags, mask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        vec3 hit_color = payload.color;

        if (payload.distance < 0.0) {
            color += hit_color;
            break;
        } else if (payload.roughness < 1.0) {
            const vec4 hit_position = origin + direction * payload.distance;
            origin.xyz = hit_position.xyz + payload.normal * 0.001f;
            direction.xyz = reflect(direction.xyz, payload.normal);
        } else {
            color += hit_color;
            break;
        }
    }*/

    imageStore(radiance_image, ivec2(coord), vec4(payload.diffuse, 1.0));
}
