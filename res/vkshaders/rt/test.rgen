#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable

layout(set = 9, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 9, binding = 1, rgba8) uniform image2D image;

#include "../include/scene.inc"
#include "../include/rt/payload.inc"

layout(location = 0) rayPayloadEXT RayPayload payload;
#define MAX_RECURSION 3

void main() 
{
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = uv * 2.0 - 1.0;
    
    mat4 view_inverse = inverse(scene.view);
    mat4 projection_inverse = inverse(scene.projection);

    vec4 origin = view_inverse * vec4(0,0,0,1);
    vec4 target = projection_inverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = view_inverse * vec4(normalize(target.xyz / target.w), 0);

    uint flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 color = vec3(0.0);

    for (int i = 0; i < MAX_RECURSION; i++) {
        traceRayEXT(tlas, flags, mask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
        vec3 hit_color = payload.color;

        if (payload.distance < 0.0) {
            color += hit_color;
            break;
        } else if (payload.roughness < 1.0) {
            const vec4 hit_position = origin + direction * payload.distance;
            origin.xyz = hit_position.xyz + payload.normal * 0.001f;
            direction.xyz = reflect(direction.xyz, payload.normal);
        } else {
            color += hit_color;
            break;
        }
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
